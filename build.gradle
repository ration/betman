buildscript {
    ext.kotlin_version = '1.2.41' // Required for Kotlin integration
    ext.spring_boot_version = '2.0.1.RELEASE'
    ext.jwt_version = '1.0.9.RELEASE'
    ext.oauth_version = '2.3.2.RELEASE'
    ext.h2_version = '1.4.197'
    ext.postgresql_version = '42.2.2'
    ext.hikari_version = '3.1.0'
    ext.rx_version = '2.1.13'
    ext.rxkotlin_version = '2.2.0'
    ext.cmd_ext = System.getProperty("os.name").toUpperCase().contains("WINDOWS") ? ".cmd" : ""



    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2"


    }
}

apply plugin: 'kotlin'
apply plugin: "kotlin-spring"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'


jar {
    baseName = 'betman'
    version = '0.1.0'
}



repositories {
    jcenter()
    maven {
        url = "https://dl.bintray.com/kotlin/exposed"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Required for Kotlin integration
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile "org.springframework.boot:spring-boot-configuration-processor"
    compile 'org.springframework.boot:spring-boot-starter-webflux'
    compile "org.postgresql:postgresql:$postgresql_version"
    compile "com.h2database:h2:$h2_version"
    compile 'io.github.microutils:kotlin-logging:1.4.9'
    compile "io.reactivex.rxjava2:rxjava:$rx_version"
    compile "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"
    compile 'io.jsonwebtoken:jjwt:0.9.0'

    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"

    compile "org.springframework.security:spring-security-jwt:$jwt_version"
    compile "org.springframework.security.oauth:spring-security-oauth2:$oauth_version"
    compile 'org.jetbrains.exposed:exposed:0.10.2'
    compile 'com.google.cloud.sql:postgres-socket-factory:1.0.8'

    compile 'org.apache.commons:commons-math3:3.6.1'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "com.h2database:h2:$h2_version"
    testCompile group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.5.0'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testRuntime 'org.hamcrest:hamcrest-core:1.3'

    compile "com.zaxxer:HikariCP:$hikari_version"
    testImplementation 'junit:junit:4.12'


}

test {
    testLogging {
        showStandardStreams = true
    }
}

def webappDir = "$projectDir/src/main/webapp"
sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            compileClasspath += test.output
            compileClasspath += test.compileClasspath
            runtimeClasspath += main.output + test.output

            //noinspection GroovyAssignabilityCheck
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

// Otherwise integrationTests don't actually get the classpaths
configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {

    // So that Gradle knows where the integration test classes are:
    testClassesDirs = sourceSets.integrationTest.output.classesDirs

    // So that Gradle knows which runtime class path to use:
    classpath = sourceSets.integrationTest.runtimeClasspath

    // Otherwise these don't always run
    outputs.upToDateWhen { false }

}


processResources {
    dependsOn "buildAngular"
}

task testAngular(type: Exec) {
    dependsOn "buildAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    commandLine "ng${cmd_ext}", "test", "--browsers", "ChromeHeadless", "--single-run"
}

task buildAngular(type: Exec) {
    dependsOn "installAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    commandLine "ng${cmd_ext}", "build", "--prod"
}

task installAngular(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    commandLine "npm${cmd_ext}", "install"
}

jar {
    dependsOn "testAngular"
    dependsOn "integrationTest"
}

bootJar {
    baseName = 'betman'
    version =  '0.1.0'
}


docker {
    // dependsOn build
    name "${bootJar.baseName}"
    dockerfile file("Dockerfile.plain")
    files bootJar.archivePath
    buildArgs(['JAR_FILE':"${bootJar.archiveName}"])
}
